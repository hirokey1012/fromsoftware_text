import axios from 'axios';
import * as cheerio from 'cheerio';
import fs from 'fs-extra';
import iconv from 'iconv-lite';
import jschardet from 'jschardet';

class SampleScraper {
    constructor() {
        this.results = [];
        this.delay = 2000; // 2ÁßíÂæÖÊ©ü
        this.requestCount = 0;
        this.startTime = Date.now();
    }

    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async fetchPage(url, retryCount = 0) {
        try {
            await this.sleep(this.delay);
            this.requestCount++;
            console.log(`  üì° „É™„ÇØ„Ç®„Çπ„Éà #${this.requestCount}`);
            
            const response = await axios.get(url, {
                timeout: 20000,
                responseType: 'arraybuffer',
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            });
            
            console.log(`  ‚úÖ ÊàêÂäü (${response.status})`);
            return this.decodeResponse(response, url);
            
        } catch (error) {
            console.log(`  ‚ùå „Ç®„É©„Éº: ${error.message}`);
            return null;
        }
    }

    decodeResponse(response, url) {
        try {
            const buffer = Buffer.from(response.data);
            const contentType = response.headers['content-type'] || '';
            let charset = null;
            
            const charsetMatch = contentType.match(/charset=([^;]+)/i);
            if (charsetMatch) {
                charset = charsetMatch[1].toLowerCase();
            }
            
            if (!charset) {
                const htmlPreview = buffer.toString('ascii', 0, 1024);
                const metaCharsetMatch = htmlPreview.match(/<meta[^>]+charset=["']?([^"'>\s]+)/i);
                if (metaCharsetMatch) {
                    charset = metaCharsetMatch[1].toLowerCase();
                }
            }
            
            if (!charset) {
                const detected = jschardet.detect(buffer);
                if (detected && detected.encoding && detected.confidence > 0.8) {
                    charset = detected.encoding.toLowerCase();
                }
            }
            
            if (!charset) {
                charset = 'utf-8';
            }
            
            console.log(`  üî§ „Ç®„É≥„Ç≥„Éº„Éá„Ç£„É≥„Ç∞: ${charset}`);
            
            if (charset === 'shift_jis' || charset === 'shift-jis' || charset === 'sjis') {
                return iconv.decode(buffer, 'shift_jis');
            } else if (charset === 'euc-jp' || charset === 'eucjp') {
                return iconv.decode(buffer, 'euc-jp');
            } else {
                return buffer.toString('utf-8');
            }
            
        } catch (error) {
            console.log(`  ‚ö†Ô∏è „Ç®„É≥„Ç≥„Éº„Éá„Ç£„É≥„Ç∞Âá¶ÁêÜ„Ç®„É©„Éº: ${error.message}`);
            return Buffer.from(response.data).toString('utf-8');
        }
    }

    async sampleKamikouryaku(gameName, baseUrl, sampleUrls) {
        console.log(`\n=== ${gameName} „Çµ„É≥„Éó„É´ÊäΩÂá∫ ===`);
        
        for (let i = 0; i < sampleUrls.length && i < 10; i++) {
            const item = sampleUrls[i];
            console.log(`${i + 1}/10: ${item.name}`);
            
            const html = await this.fetchPage(item.url);
            if (html) {
                const flavorText = this.extractKamikouryakuFlavorText(html, item.name);
                
                this.results.push({
                    game: gameName,
                    category: item.category || '„Åù„ÅÆ‰ªñ',
                    name: item.name,
                    url: item.url,
                    flavorText: flavorText || ''
                });
                
                if (flavorText) {
                    console.log(`  ‚úÖ „Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæóÊàêÂäü`);
                    console.log(`  üìù "${flavorText.substring(0, 50)}..."`);
                } else {
                    console.log(`  ‚ùå „Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„Å™„Åó`);
                }
            }
        }
    }

    extractKamikouryakuFlavorText(html, itemName) {
        const $ = cheerio.load(html);
        let flavorText = '';
        
        // Ë§áÊï∞„ÅÆË¶ãÂá∫„Åó„Éë„Çø„Éº„É≥„Åß„Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„ÇíÊé¢„Åô
        const headingPatterns = ['„Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà', 'Ë™¨Êòé', '„Ç¢„Ç§„ÉÜ„É†Ë™¨Êòé', 'ÂäπÊûú'];
        
        $('h1, h2, h3, h4, h5, h6').each((i, element) => {
            const heading = $(element).text().trim();
            
            // „ÅÑ„Åö„Çå„Åã„ÅÆ„Éë„Çø„Éº„É≥„Å´„Éû„ÉÉ„ÉÅ„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            const matchesPattern = headingPatterns.some(pattern => heading.includes(pattern));
            
            if (matchesPattern) {
                let nextElement = $(element).next();
                let textContent = '';
                
                while (nextElement.length && !nextElement.is('h1, h2, h3, h4, h5, h6')) {
                    const text = nextElement.text().trim();
                    if (text && text.length > 10) {
                        textContent += text + '\n';
                    }
                    nextElement = nextElement.next();
                }
                
                if (textContent.trim()) {
                    flavorText = textContent.trim();
                    return false; // ÊúÄÂàù„Å´Ë¶ã„Å§„Åã„Å£„Åü„ÇÇ„ÅÆ„Çí‰ΩøÁî®
                }
            }
        });
        
        // Ë¶ãÂá∫„Åó„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÄÅË°®ÂΩ¢Âºè„ÅÆ„Éá„Éº„Çø„Åã„ÇâÊäΩÂá∫„ÇíË©¶Ë°å
        if (!flavorText) {
            $('table').each((i, table) => {
                $(table).find('tr').each((j, row) => {
                    const cells = $(row).find('td, th');
                    if (cells.length >= 2) {
                        const label = $(cells[0]).text().trim();
                        const content = $(cells[1]).text().trim();
                        
                        if ((label.includes('Ë™¨Êòé') || label.includes('„Éï„É¨„Éº„Éê„Éº') || label.includes('ÂäπÊûú')) && 
                            content.length > 20) {
                            flavorText = content;
                            return false;
                        }
                    }
                });
                
                if (flavorText) return false;
            });
        }
        
        return flavorText;
    }

    async sampleSwiki(gameName, baseUrl, sampleUrls) {
        console.log(`\n=== ${gameName} „Çµ„É≥„Éó„É´ÊäΩÂá∫ ===`);
        
        for (let i = 0; i < sampleUrls.length && i < 10; i++) {
            const item = sampleUrls[i];
            console.log(`${i + 1}/10: ${item.name}`);
            
            const html = await this.fetchPage(item.url);
            if (html) {
                const flavorText = this.extractSwikiFlavorText(html, item.name);
                
                this.results.push({
                    game: gameName,
                    category: item.category || '„Åù„ÅÆ‰ªñ',
                    name: item.name,
                    url: item.url,
                    flavorText: flavorText || ''
                });
                
                if (flavorText) {
                    console.log(`  ‚úÖ „Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæóÊàêÂäü`);
                    console.log(`  üìù "${flavorText.substring(0, 50)}..."`);
                } else {
                    console.log(`  ‚ùå „Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„Å™„Åó`);
                }
            }
        }
    }

    extractSwikiFlavorText(html, itemName) {
        const $ = cheerio.load(html);
        const flavorTexts = [];
        
        // „Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ß„Éö„Éº„Ç∏„Åã„ÇâË§áÊï∞„ÅÆ„Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„ÇíÊäΩÂá∫
        if (itemName === '„Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ß') {
            // Êó•Êú¨Ë™û„ÅÆ„Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÑ™ÂÖà„Åó„Å¶ÊäΩÂá∫
            $('body').find('*').each((i, element) => {
                const text = $(element).text().trim();
                
                if (text.length > 30 && text.length < 800 &&
                    (text.includes('„Åß„ÅÇ„Çã') || text.includes('„Å®„ÅÑ„ÅÜ') || text.includes('„ÅÆ„Å†') ||
                     text.includes('„Åü„ÇÅ„ÅÆ') || text.includes('„Å´„Çà„Çã') || text.includes('„ÄÇ') ||
                     text.includes('„Åï„Çå„Çã') || text.includes('„Åï„Çå„Åü') || text.includes('„Å™„Çã') ||
                     text.includes('„Çå„Çã') || text.includes('„ÇÇ„ÅÆ') || text.includes('„Åì„Å®')) &&
                    !text.includes('Á∑®ÈõÜ') && !text.includes('Êõ¥Êñ∞') &&
                    !text.includes('„Ç≥„É°„É≥„Éà') && !text.includes('wiki') &&
                    !text.includes('ÁõÆÊ¨°') && !text.includes('„É°„Éã„É•„Éº') &&
                    !text.includes('http') && !text.includes('www') &&
                    !text.includes('„Éö„Éº„Ç∏') && !text.includes('„Çµ„Ç§„Éà')) {
                    
                    // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
                    if (!flavorTexts.some(existing => existing.includes(text.substring(0, 15)))) {
                        flavorTexts.push(text);
                    }
                }
            });
            
            // Ëã±Ë™û„ÅÆ„Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„ÅØÈô§Â§ñÔºàÊó•Êú¨Ë™ûÂÑ™ÂÖàÔºâ
            
            // ÊúÄÂ§ß10ÂÄã„Åæ„ÅßÊäΩÂá∫
            return flavorTexts.slice(0, 10).join('\n\n---\n\n');
        }
        
        // ÂÄãÂà•„Ç¢„Ç§„ÉÜ„É†„Éö„Éº„Ç∏„ÅÆÂ†¥ÂêàÔºàÂæìÊù•„ÅÆ„É≠„Ç∏„ÉÉ„ÇØÔºâ
        let flavorText = '';
        
        $('#body').find('p, div').each((i, element) => {
            const text = $(element).text().trim();
            if (text.length > 30 && text.length < 1000) {
                if ((text.includes('„ÄÇ') || text.includes('„Åß„ÅÇ„Çã') || text.includes('„Å®„ÅÑ„ÅÜ') || 
                     text.includes('„ÅÆ„Å†') || text.includes('„Åü„ÇÅ„ÅÆ') || text.includes('„Å´„Çà„Çã')) &&
                    !text.includes('Á∑®ÈõÜ') && !text.includes('Êõ¥Êñ∞') && 
                    !text.includes('„Ç≥„É°„É≥„Éà') && !text.includes('wiki') &&
                    !text.includes('ÁõÆÊ¨°') && !text.includes('„É°„Éã„É•„Éº')) {
                    flavorText = text;
                    return false;
                }
            }
        });
        
        return flavorText;
    }

    async sampleSeesaaWiki(gameName) {
        console.log(`\n=== ${gameName} „Çµ„É≥„Éó„É´ÊäΩÂá∫ ===`);
        
        // „Ç≤„Éº„É†Âà•„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Éö„Éº„Ç∏„ÇíÂèñÂæó
        let categoryUrl = '';
        switch (gameName) {
            case '„Éá„É¢„É≥„Ç∫„ÇΩ„Ç¶„É´':
                categoryUrl = 'https://seesaawiki.jp/fromsoft_flavor-text/d/Demon%27s%a5%a2%a5%a4%a5%c6%a5%e0%bc%ef%ce%e0%ca%cc%cd%f7';
                break;
            case '„ÉÄ„Éº„ÇØ„ÇΩ„Ç¶„É´1':
                categoryUrl = 'https://seesaawiki.jp/fromsoft_flavor-text/d/DSR%a5%a2%a5%a4%a5%c6%a5%e0%bc%ef%ce%e0%ca%cc%cd%f7';
                break;
            case '„ÉÄ„Éº„ÇØ„ÇΩ„Ç¶„É´3':
                categoryUrl = 'https://seesaawiki.jp/fromsoft_flavor-text/d/DS3%a5%a2%a5%a4%a5%c6%a5%e0%bc%ef%ce%e0%ca%cc%cd%f7';
                break;
            default:
                console.log(`  ‚ö†Ô∏è Êú™Áü•„ÅÆ„Ç≤„Éº„É†Âêç: ${gameName}`);
                return;
        }
        
        console.log(`  üîç „Ç´„ÉÜ„Ç¥„É™„Éö„Éº„Ç∏ÂèñÂæó: ${categoryUrl}`);
        const categoryHtml = await this.fetchPage(categoryUrl);
        if (!categoryHtml) {
            console.log(`  ‚ùå „Ç´„ÉÜ„Ç¥„É™„Éö„Éº„Ç∏„ÅÆÂèñÂæó„Å´Â§±Êïó`);
            return;
        }
        
        // „Ç´„ÉÜ„Ç¥„É™„Éö„Éº„Ç∏„Åã„Çâ„Ç¢„Ç§„ÉÜ„É†„É™„É≥„ÇØ„ÇíÊäΩÂá∫
        const sampleUrls = this.extractSeesaaItemLinks(categoryHtml);
        
        if (sampleUrls.length === 0) {
            console.log(`  ‚ö†Ô∏è „Ç¢„Ç§„ÉÜ„É†„É™„É≥„ÇØ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü`);
            return;
        }
        
        // „ÉÜ„É≥„Éó„É¨„Éº„Éà„Éö„Éº„Ç∏„Å™„Å©„ÇíÈô§Â§ñ
        const filteredUrls = sampleUrls.filter(item => 
            !item.name.includes('„ÉÜ„É≥„Éó„É¨„Éº„Éà') && 
            !item.name.includes('Template') &&
            !item.name.includes('„Åù„ÅÆ‰ªñ') &&
            item.name.length < 20
        );
        
        const urlsToProcess = filteredUrls.length > 0 ? filteredUrls : sampleUrls;
        
        for (let i = 0; i < urlsToProcess.length && i < 10; i++) {
            const item = urlsToProcess[i];
            console.log(`${i + 1}/${Math.min(urlsToProcess.length, 10)}: ${item.name}`);
            
            const html = await this.fetchPage(item.url);
            if (html) {
                const flavorText = this.extractSeesaaFlavorText(html, item.name);
                
                this.results.push({
                    game: gameName,
                    category: '„Åù„ÅÆ‰ªñ',
                    name: item.name,
                    url: item.url,
                    flavorText: flavorText || ''
                });
                
                if (flavorText) {
                    console.log(`  ‚úÖ „Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæóÊàêÂäü`);
                    console.log(`  üìù "${flavorText.substring(0, 50)}..."`);
                } else {
                    console.log(`  ‚ùå „Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„Å™„Åó`);
                }
            }
        }
    }

    extractSeesaaFlavorText(html, itemName) {
        const $ = cheerio.load(html);
        const flavorTexts = [];
        
        // Seesaa Wiki„ÅÆÊßãÈÄ†„Åß„ÅØ„ÄÅ„Ç´„ÉÜ„Ç¥„É™„Éö„Éº„Ç∏„Å´Ë§áÊï∞„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã
        // ÂÄãÂà•„ÅÆ„Ç¢„Ç§„ÉÜ„É†„Çª„ÇØ„Ç∑„Éß„É≥„ÇíÊé¢„Åô
        if (itemName.includes('„Ç¢„Ç§„ÉÜ„É†') || itemName.includes('Ê∂àËÄóÂìÅ') || itemName.includes('ÊäïÊì≤') || 
            itemName.includes('„ÇΩ„Ç¶„É´') || itemName.includes('Âº∑ÂåñÁ¥†Êùê') || itemName.includes('Ë≤¥ÈáçÂìÅ') ||
            itemName.includes('Áü¢') || itemName.includes('„Éú„É´„Éà') || itemName.includes('Áü≠Ââ£') ||
            itemName.includes('Áõ¥Ââ£') || itemName.includes('Â§ßÂâ£') || itemName.includes('Áõæ') ||
            itemName.includes('ÊåáËº™') || itemName.includes('È≠îË°ì') || itemName.includes('Â•áË∑°') ||
            itemName.includes('Èò≤ÂÖ∑') || itemName.includes('„ÉÑ„Éº„É´') || itemName.includes('„Éû„É´„ÉÅ„Éó„É¨„Ç§') ||
            itemName.includes('Ë™ìÁ¥Ñ') || itemName.includes('„Éú„Çπ') || itemName.includes('„Åù„ÅÆ‰ªñ')) {
            
            // „Éö„Éº„Ç∏ÂÜÖ„ÅÆ„ÉÜ„Éº„Éñ„É´„Çª„É´„Åã„ÇâÊó•Êú¨Ë™û„ÅÆ„Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„ÇíÊäΩÂá∫
            $('td').each((i, cell) => {
                const text = $(cell).text().trim();
                
                // Êó•Êú¨Ë™û„ÅÆ„Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„Å®ÊÄù„Çè„Çå„Çã„ÉÜ„Ç≠„Çπ„Éà„ÇíÂà§ÂÆöÔºà„Çà„ÇäÂπÖÂ∫É„ÅÑ„Éë„Çø„Éº„É≥„Å´ÂØæÂøúÔºâ
                if (text.length > 10 && text.length < 400 &&
                    (text.includes('„Åß„ÅÇ„Çã') || text.includes('„Å®„ÅÑ„ÅÜ') || text.includes('„ÅÆ„Å†') ||
                     text.includes('„Åü„ÇÅ„ÅÆ') || text.includes('„Å´„Çà„Çã') || text.includes('Áî®„ÅÆ') ||
                     text.includes('ÊåÅ„Å§') || text.includes('„Çâ„Çå„Åü') || text.includes('„Åï„Çå„Åü') ||
                     text.includes('„Åô„Çã') || text.includes('„ÄÇ') || text.includes('„ÄÅ') ||
                     text.includes('„Åß„Åç') || text.includes('‰Ωú„Çâ') || text.includes('‰ΩøÁî®') ||
                     text.includes('ÊîªÊíÉ') || text.includes('Èò≤Âæ°') || text.includes('ÂäπÊûú') ||
                     text.includes('Â®ÅÂäõ') || text.includes('ÊØîËºÉ') || text.includes('Âä£„Å£') ||
                     text.includes('ÂÑ™„Çå') || text.includes('ÁâπÂà•') || text.includes('Âº∑Âäõ') ||
                     text.includes('ËªΩ„ÅÑ') || text.includes('Èáç„ÅÑ') || text.includes('Èã≠„ÅÑ') ||
                     text.includes('Á°¨„ÅÑ') || text.includes('„ÉÄ„É°„Éº„Ç∏') || text.includes('ÊùêÊñô') ||
                     text.includes('Á¥†Êùê') || text.includes('Ë£Ω') || text.includes('‰Ωú„Çä') ||
                     text.includes('„ÅÆÁü¢') || text.includes('„ÅÆÂâ£') || text.includes('„ÅÆÁõæ') ||
                     text.includes('È≠îÊ≥ï') || text.includes('Âë™Êñá') || text.includes('Á•à„Çä') ||
                     text.includes('Âäõ„Çí') || text.includes('ËÉΩÂäõ') || text.includes('ÊäÄ') ||
                     text.includes('Âè§„ÅÑ') || text.includes('Êñ∞„Åó') || text.includes('‰ºùË™¨') ||
                     text.includes('Á•û') || text.includes('ËÅñ') || text.includes('Èóá') ||
                     text.includes('ÂÖâ') || text.includes('ÁÇé') || text.includes('Ê∞∑') ||
                     text.includes('ÊØí') || text.includes('Ë°Ä') || text.includes('È™®') ||
                     /[‰∏Ä-ÈæØ]/.test(text))) { // Êº¢Â≠ó„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã
                    
                    // Êòé„Çâ„Åã„Å´„Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„Åß„ÅØ„Å™„ÅÑ„ÇÇ„ÅÆ„ÇíÈô§Â§ñ
                    if (!text.includes('Á∑®ÈõÜ') && !text.includes('Êõ¥Êñ∞') && 
                        !text.includes('„Ç≥„É°„É≥„Éà') && !text.includes('wiki') &&
                        !text.includes('http') && !text.includes('Ver') &&
                        !text.includes('Remake') && !text.includes('English') &&
                        !text.includes('Japanese') && !text.includes('„É™„É≥„ÇØ') &&
                        !text.includes('„Ç´„ÉÜ„Ç¥„É™') && !text.includes('„É°„Éã„É•„Éº') &&
                        !text.includes('„Éö„Éº„Ç∏') && !text.includes('ÂêçÂâç') &&
                        !text.match(/^[A-Za-z\s\.\,\!\?\(\)]+$/)) { // Ëã±Ë™û„ÅÆ„Åø„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÈô§Â§ñ
                        
                        // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
                        if (!flavorTexts.some(existing => existing.includes(text.substring(0, 10)))) {
                            flavorTexts.push(`${text}Ôºà„Ç¢„Ç§„ÉÜ„É†: ‰∏çÊòéÔºâ`);
                        }
                    }
                }
            });
            
            // ÊÆµËêΩ„Åã„Çâ„ÇÇÊäΩÂá∫„ÇíË©¶Ë°åÔºàÂπÖÂ∫É„ÅÑ„Éë„Çø„Éº„É≥„Å´ÂØæÂøúÔºâ
            $('p, div, span').each((i, element) => {
                const text = $(element).text().trim();
                
                if (text.length > 8 && text.length < 400 &&
                    (text.includes('„Åß„ÅÇ„Çã') || text.includes('„Å®„ÅÑ„ÅÜ') || text.includes('„ÅÆ„Å†') ||
                     text.includes('„Åü„ÇÅ„ÅÆ') || text.includes('„Å´„Çà„Çã') || text.includes('Áî®„ÅÆ') ||
                     text.includes('„Åß„Åç') || text.includes('‰Ωú„Çâ') || text.includes('‰ΩøÁî®') ||
                     text.includes('ÊîªÊíÉ') || text.includes('Èò≤Âæ°') || text.includes('ÂäπÊûú') ||
                     text.includes('Â®ÅÂäõ') || text.includes('ÊØîËºÉ') || text.includes('Âä£„Å£') ||
                     text.includes('ÂÑ™„Çå') || text.includes('ÁâπÂà•') || text.includes('Âº∑Âäõ') ||
                     text.includes('ËªΩ„ÅÑ') || text.includes('Èáç„ÅÑ') || text.includes('Èã≠„ÅÑ') ||
                     text.includes('Á°¨„ÅÑ') || text.includes('„ÉÄ„É°„Éº„Ç∏') || text.includes('ÊùêÊñô') ||
                     text.includes('Á¥†Êùê') || text.includes('Ë£Ω') || text.includes('‰Ωú„Çä') ||
                     text.includes('„ÅÆÁü¢') || text.includes('„ÅÆÂâ£') || text.includes('„ÅÆÁõæ') ||
                     text.includes('È≠îÊ≥ï') || text.includes('Âë™Êñá') || text.includes('Á•à„Çä') ||
                     text.includes('Âäõ„Çí') || text.includes('ËÉΩÂäõ') || text.includes('ÊäÄ') ||
                     text.includes('Âè§„ÅÑ') || text.includes('Êñ∞„Åó') || text.includes('‰ºùË™¨') ||
                     text.includes('Á•û') || text.includes('ËÅñ') || text.includes('Èóá') ||
                     text.includes('ÂÖâ') || text.includes('ÁÇé') || text.includes('Ê∞∑') ||
                     text.includes('ÊØí') || text.includes('Ë°Ä') || text.includes('È™®') ||
                     /[‰∏Ä-ÈæØ]/.test(text))) { // Êº¢Â≠ó„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã
                    
                    if (!text.includes('Á∑®ÈõÜ') && !text.includes('Êõ¥Êñ∞') && 
                        !text.includes('„Ç≥„É°„É≥„Éà') && !text.includes('wiki') &&
                        !text.includes('http') && !text.includes('Ver') &&
                        !text.includes('Remake') && !text.includes('„Ç´„ÉÜ„Ç¥„É™') &&
                        !text.includes('„É°„Éã„É•„Éº') && !text.includes('„Éö„Éº„Ç∏') &&
                        !text.includes('„É™„É≥„ÇØ') && !text.includes('‰∏ÄË¶ß') &&
                        !text.match(/^[A-Za-z\s\.\,\!\?\(\)\"]+$/)) { // Ëã±Ë™û„ÅÆ„Åø„ÇíÈô§Â§ñ
                        
                        if (!flavorTexts.some(existing => existing.includes(text.substring(0, 8)))) {
                            flavorTexts.push(`${text}Ôºà„Ç¢„Ç§„ÉÜ„É†: ‰∏çÊòéÔºâ`);
                        }
                    }
                }
            });
            
            // ÊúÄÂ§ß10ÂÄã„Åæ„ÅßÊäΩÂá∫
            return flavorTexts.slice(0, 10).join('\n\n---\n\n');
        }
        
        // ÂÄãÂà•„Ç¢„Ç§„ÉÜ„É†„Éö„Éº„Ç∏„ÅÆÂ†¥ÂêàÔºàÂæìÊù•„ÅÆ„É≠„Ç∏„ÉÉ„ÇØÔºâ
        let flavorText = '';
        
        $('.main_body, .main').each((i, element) => {
            let textContent = '';
            
            // ÊÆµËêΩ„ÇÑË°®„Åã„Çâ„ÉÜ„Ç≠„Çπ„Éà„ÇíÊäΩÂá∫
            $(element).find('p, div, td').each((j, textElement) => {
                const text = $(textElement).text().trim();
                if (text.length > 20 && text.length < 500) {
                    // „Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà„Çâ„Åó„ÅÑÊñáÁ´†„ÇíÂà§ÂÆö
                    if (text.includes('„Å®„ÅÑ„ÅÜ') || text.includes('„Åß„ÅÇ„Çã') || text.includes('„ÅÆ„Å†') || 
                        text.includes('„Åü„ÇÅ„ÅÆ') || text.includes('„Å´„Çà„Çã') || text.includes('ÊåÅ„Å§')) {
                        if (!text.includes('Á∑®ÈõÜ') && !text.includes('Êõ¥Êñ∞') && 
                            !text.includes('„Ç≥„É°„É≥„Éà') && !text.includes('wiki')) {
                            textContent = text;
                            return false; // ÊúÄÂàù„Å´Ë¶ã„Å§„Åã„Å£„Åü„ÇÇ„ÅÆ„Çí‰ΩøÁî®
                        }
                    }
                }
            });
            
            if (textContent) {
                flavorText = textContent;
                return false;
            }
        });
        
        return flavorText;
    }

    extractSeesaaItemLinks(html) {
        const $ = cheerio.load(html);
        const itemLinks = [];
        
        // Seesaa Wiki„ÅÆ„Ç¢„Ç§„ÉÜ„É†„É™„É≥„ÇØ„ÇíÊäΩÂá∫ÔºàÊúÄÂ§ß10ÂÄã„Åæ„ÅßÔºâ
        $('a[href*="/d/"]').each((i, link) => {
            if (itemLinks.length >= 10) return false;
            
            const href = $(link).attr('href');
            const text = $(link).text().trim();
            
            // „Ç¢„Ç§„ÉÜ„É†Âêç„Çâ„Åó„ÅÑ„É™„É≥„ÇØ„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
            if (text && text.length > 0 && text.length < 50 && 
                !text.includes('„Ç´„ÉÜ„Ç¥„É™') && !text.includes('‰∏ÄË¶ß') &&
                !text.includes('Á∑®ÈõÜ') && !text.includes('„Ç≥„É°„É≥„Éà') &&
                !text.includes('„Éà„ÉÉ„Éó') && !text.includes('„É°„Éã„É•„Éº')) {
                
                let fullUrl = href;
                if (href.startsWith('/')) {
                    fullUrl = 'https://seesaawiki.jp/fromsoft_flavor-text' + href;
                }
                
                itemLinks.push({
                    name: text,
                    url: fullUrl,
                    category: '„Åù„ÅÆ‰ªñ'
                });
            }
        });
        
        console.log(`  üìã ${itemLinks.length}ÂÄã„ÅÆ„Ç¢„Ç§„ÉÜ„É†„É™„É≥„ÇØ„ÇíÊäΩÂá∫`);
        return itemLinks;
    }

    generateSampleCSV() {
        const csvHeader = '‰ΩúÂìÅÂêç,„Ç¢„Ç§„ÉÜ„É†„Ç´„ÉÜ„Ç¥„É™,„Ç¢„Ç§„ÉÜ„É†Âêç,„Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„Éà,ÂèñÂæóÂÖàURL\n';
        const csvContent = this.results.map(item => {
            const escapedGame = `"${item.game.replace(/"/g, '""')}"`;
            const escapedCategory = `"${item.category.replace(/"/g, '""')}"`;
            const escapedName = `"${item.name.replace(/"/g, '""')}"`;
            const escapedFlavor = `"${item.flavorText.replace(/"/g, '""').replace(/\n/g, '\\n')}"`;
            const escapedUrl = `"${item.url}"`;
            return `${escapedGame},${escapedCategory},${escapedName},${escapedFlavor},${escapedUrl}`;
        }).join('\n');
        
        return csvHeader + csvContent;
    }

    async run() {
        try {
            console.log('üéØ „Éï„É≠„É†„Éª„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢ „Çµ„É≥„Éó„É´ÊäΩÂá∫ÈñãÂßã');
            console.log('ÂêÑ„Ç≤„Éº„É†„Åã„Çâ10ÂÄã„Åö„Å§„ÅÆ„Ç¢„Ç§„ÉÜ„É†„Çí„Çµ„É≥„Éó„É´ÂèñÂæó„Åó„Åæ„Åô\n');
            
            // „Ç®„É´„Éá„É≥„É™„É≥„Ç∞ „Çµ„É≥„Éó„É´
            const eldenRingSamples = [
                { name: 'ËÅñÊùØÁì∂', url: 'https://kamikouryaku.net/eldenring/?ËÅñÊùØÁì∂', category: 'ÈÅìÂÖ∑' },
                { name: '„É´„Éº„É≥„ÅÆÂºß', url: 'https://kamikouryaku.net/eldenring/?„É´„Éº„É≥„ÅÆÂºß', category: 'ÈÅìÂÖ∑' },
                { name: 'ÊòüÂÖâ„ÅÆÊ¨†Áâá', url: 'https://kamikouryaku.net/eldenring/?ÊòüÂÖâ„ÅÆÊ¨†Áâá', category: 'ÈÅìÂÖ∑' },
                { name: 'ÂæÆÁù°„ÅÆÊûù', url: 'https://kamikouryaku.net/eldenring/?ÂæÆÁù°„ÅÆÊûù', category: 'ÈÅìÂÖ∑' },
                { name: 'ÈúäÈ¶¨„ÅÆÊåáÁ¨õ', url: 'https://kamikouryaku.net/eldenring/?ÈúäÈ¶¨„ÅÆÊåáÁ¨õ', category: 'ÈÅìÂÖ∑' },
                { name: 'ÊØí„ÅÆËãîËñ¨', url: 'https://kamikouryaku.net/eldenring/?ÊØí„ÅÆËãîËñ¨', category: 'ÈÅìÂÖ∑' },
                { name: 'ÁÅ´ÁÇéÂ£∫', url: 'https://kamikouryaku.net/eldenring/?ÁÅ´ÁÇéÂ£∫', category: 'ÈÅìÂÖ∑' },
                { name: 'Ë™øÈ¶ôÁì∂', url: 'https://kamikouryaku.net/eldenring/?Ë™øÈ¶ôÁì∂', category: 'ÈÅìÂÖ∑' },
                { name: 'ÈÅ†ÁúºÈè°', url: 'https://kamikouryaku.net/eldenring/?ÈÅ†ÁúºÈè°', category: 'ÈÅìÂÖ∑' },
                { name: 'È™®„ÅÆÊäï„ÅíÁü¢', url: 'https://kamikouryaku.net/eldenring/?È™®„ÅÆÊäï„ÅíÁü¢', category: 'ÈÅìÂÖ∑' }
            ];
            
            await this.sampleKamikouryaku('„Ç®„É´„Éá„É≥„É™„É≥„Ç∞', 'https://kamikouryaku.net/eldenring/', eldenRingSamples);
            
            // „Éñ„É©„ÉÉ„Éâ„Éú„Éº„É≥ „Çµ„É≥„Éó„É´Ôºà„É°„Ç§„É≥„Ç¢„Ç§„ÉÜ„É†„Éö„Éº„Ç∏„Åã„ÇâÊäΩÂá∫Ôºâ
            const bloodborneSamples = [
                { name: '„Ç¢„Ç§„ÉÜ„É†‰∏ÄË¶ß', url: 'https://bloodborne.swiki.jp/index.php?%E3%82%A2%E3%82%A4%E3%83%86%E3%83%A0', category: 'ÂÖ®„Ç¢„Ç§„ÉÜ„É†' }
            ];
            
            await this.sampleSwiki('„Éñ„É©„ÉÉ„Éâ„Éú„Éº„É≥', 'https://bloodborne.swiki.jp/', bloodborneSamples);
            
            // Seesaa Wiki „Çµ„É≥„Éó„É´ÔºàÂêÑ„Ç≤„Éº„É†Ôºâ
            await this.sampleSeesaaWiki('„Éá„É¢„É≥„Ç∫„ÇΩ„Ç¶„É´');
            await this.sampleSeesaaWiki('„ÉÄ„Éº„ÇØ„ÇΩ„Ç¶„É´1');
            await this.sampleSeesaaWiki('„ÉÄ„Éº„ÇØ„ÇΩ„Ç¶„É´3');
            
            // ÁµêÊûú‰øùÂ≠ò
            const csvContent = this.generateSampleCSV();
            const timestamp = new Date().toISOString().slice(0, 19).replace(/[T:]/g, '-');
            const filename = `fromsoft_sample_${timestamp}.csv`;
            
            await fs.writeFile(filename, csvContent, 'utf8');
            
            // Áµ±Ë®àÊÉÖÂ†±
            const gameStats = {};
            const withFlavorStats = {};
            
            for (const item of this.results) {
                gameStats[item.game] = (gameStats[item.game] || 0) + 1;
                if (item.flavorText.length > 0) {
                    withFlavorStats[item.game] = (withFlavorStats[item.game] || 0) + 1;
                }
            }
            
            console.log(`\n=== „Çµ„É≥„Éó„É´ÊäΩÂá∫ÂÆå‰∫Ü ===`);
            console.log(`„Éï„Ç°„Ç§„É´Âêç: ${filename}`);
            console.log(`Á∑è„Ç¢„Ç§„ÉÜ„É†Êï∞: ${this.results.length}`);
            console.log('\n„Ç≤„Éº„É†Âà•Áµ±Ë®à:');
            for (const [game, count] of Object.entries(gameStats)) {
                const withFlavor = withFlavorStats[game] || 0;
                console.log(`  ${game}: ${count}‰ª∂ („Éï„É¨„Éº„Éê„Éº„ÉÜ„Ç≠„Çπ„ÉàÊúâ„Çä: ${withFlavor}‰ª∂)`);
            }
            
        } catch (error) {
            console.error('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error);
        }
    }
}

const scraper = new SampleScraper();
scraper.run();